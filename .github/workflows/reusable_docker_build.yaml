name: Reusable workflow for docker build

on:
  workflow_call:
    inputs:
      context:
        required: false
        type: string
        default: "."
      dockerfile:
        required: false
        type: string
        default: Dockerfile
      image_prefix:
        required: true
        type: string
      use_docker_in_docker:
        type: boolean
        default: false
    secrets:
      DOCKERHUB_USER:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  docker_lint:
    name: Lint Dockerfile
    runs-on: [self-hosted, docker-in-docker]
    steps:
      - uses: actions/checkout@v2 
      - uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: ${{ inputs.dockerfile }}

  docker_build:
    name: Build & push Docker
    needs: docker_lint 
    if: ${{ ! inputs.use_docker_in_docker }}
    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: get version
        run: echo "VERSION=$(cat ${{ inputs.context }}/VERSION)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: |
            ${{ inputs.image_prefix }}:latest
            ${{ inputs.image_prefix }}:${{ env.VERSION }}

  docker_in_docker_build:
    name: Build & push Docker (Docker-in-docker)
    needs: docker_lint
    if: ${{ inputs.use_docker_in_docker }}
    runs-on: [self-hosted, docker-in-docker]
    steps:
      - uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: get version
        run: echo "VERSION=$(cat ${{ inputs.context }}/VERSION)" >> $GITHUB_ENV

      - name: Build and push
        run: |
          docker build "${{ inputs.context }}" -f "${{ inputs.dockerfile }}" -t ${{ inputs.image_prefix }}:latest -t ${{ inputs.image_prefix }}:${{ env.VERSION }}
          docker push ${{ inputs.image_prefix }}:${{ env.VERSION }}
          docker push ${{ inputs.image_prefix }}:latest
